let g:plug_threads = 1
let mapleader = ","

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'

" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"    \ 'do': 'bash install.sh',
"    \ }

" Plug 'w0rp/ale'

" Plug 'HerringtonDarkholme/yats.vim'
" Plug 'mhartington/nvim-typescript', {'do': './install.sh'}

" Plug 'thinca/vim-ref'
" Plug 'kbrw/elixir.nvim', { 'do': 'yes \| ./install.sh' }

Plug 'itchyny/lightline.vim'

" Plug 'maximbaz/lightline-ale'

Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'mattn/emmet-vim'
" Plug 'ngmy/vim-rubocop'
" Plug 'janko-m/vim-test'
" Plug 'Shougo/deoplete.nvim'
" Plug 'roxma/nvim-yarp'
" Plug 'roxma/vim-hug-neovim-rpc'
" " Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }

" Themes
" Plug 'rakr/vim-two-firewatch'
Plug 'dracula/vim', { 'as': 'dracula' }
" Plug 'cocopon/iceberg.vim'
" Plug 'joshdick/onedark.vim'

Plug 'ryanoasis/vim-devicons'
Plug 'sheerun/vim-polyglot'
call plug#end()

syntax on
color dracula
set number
set tabstop=2
set shiftwidth=2
set smarttab
set expandtab
set foldmethod=indent
set foldlevel=20
set shell=/bin/bash
hi Visual term=reverse cterm=reverse guibg=Gray
hi StatusLine ctermbg=3 ctermfg=Black


" let g:LanguageClient_autoStop = 0
" let g:LanguageClient_serverCommands = {
"     \ 'javascript': ['javascript-typescript-stdio'],
"     \ 'javascript.jsx': ['javascript-typescript-stdio'],
"     \ 'elixir': ['~/Documents/_CODE/util/elixir-ls/bin/language_server.sh'],
"     \ 'ruby': ['tcp://localhost:7658']
"     \ }

" let g:ale_linters = {
" \   'css': ['csslint'],
" \   'elixir': ['mix'],
" \   'javascript': ['prettier', 'eslint'],
" \   'ruby': ['rubocop'],
" \   'scss': ['sasslint']
" \}

" let g:ale_fixers = {
" \   'css': ['csslint'],
" \   'elixir': ['mix_format'],
" \   'javascript': ['prettier', 'eslint'],
" \   'ruby': ['rubocop'],
" \   'scss': ['sasslint']
" \}

" nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" autocmd FileType ruby setlocal omnifunc=LanguageClient#complete

inoremap <C-@> <C-x><C-o>

" nmap <silent> t<C-n> :TestNearest<CR>
" nmap <silent> t<C-f> :TestFile<CR>
" nmap <silent> t<C-s> :TestSuite<CR>
" nmap <silent> t<C-l> :TestLast<CR>
" nmap <silent> t<C-g> :TestVisit<CR>

nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>
imap <C-s> <esc>:w<cr>

set encoding=utf8

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified', 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \   'filetype': 'MyFiletype',
      \   'fileformat': 'MyFileformat'
      \ },
      \ }

let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }


function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|node_modules)$',
  \ }
let g:ctrlp_clear_cache_on_exit = 0
